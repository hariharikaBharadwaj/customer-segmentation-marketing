Bank Marketing Project - Technical Summary
Project Overview
This project analyzes customer segmentation and subscription patterns from a bank marketing dataset. The objective is to identify trends by education, job, and age to improve targeted marketing efforts.
Tools & Technologies Used
- Python 3.13
- pandas, matplotlib, SQLAlchemy, mysql-connector-python
- MySQL Server + Workbench (local setup)
- Jupyter Notebook & Terminal for execution
Project Steps Completed
1.	Data Import & Setup
- Imported raw “bank.csv” using MySQL Workbench Table Data Import Wizard.
- Created MySQL schema “bank_marketing” and table “bank_data”.
- Renamed “deposit” column to “y” for label alignment.
2.	Data Cleaning (Python)
- Used “final_clean_data.py” to map categorical values (“yes/no” to 1/0).
- Standardized column names (e.g., “default” to “default_status”).
- Saved output as “cleaned_bank_data.csv”.
3.	MySQL Table Load
- Used “load_cleaned_csv_to_mysql.py” to insert cleaned data using SQLAlchemy.
- Loaded into “bank_data” table with “if_exists='replace'” mode.
4.	Stored Procedure Creation
- Created three stored procedures:
  • GetSubscriptionByEducation
  • GetAvgBalanceByJob
  • GetSubscriptionByAgeGroup
- These group and summarize data for visualization.
5.	Python-Based Analysis and Visualization
- Used Jupyter Notebook and standalone Python scripts to connect to the MySQL database and run analytics.
- Leveraged ‘mysql-connector-python’ to call stored procedures from MySQL.
- Results were loaded into pandas DataFrames using ‘cursor.stored_results()’ and converted to tabular format.
- Implemented plots using ‘matplotlib’ to visually compare:
  • Subscription counts across education levels
  • Average balances by profession
  • Subscription rate percentages across defined age groups.
- Scripts used include:
  • clean_data.py: for standardizing and exporting clean data
  • load_cleaned_csv_to_mysql.py: for loading cleaned data into MySQL
  • analyze_bank_data.py: for executing procedures and plotting subplots.
- Plots were generated using ‘matplotlib.pyplot.subplots()’ with clear labels and layout formatting for readability.
- Jupyter environment facilitated modular testing, data inspection, and debugging in an interactive way.
6.	Deliverables
- PowerPoint: `Bank_Marketing_Insights.pptx`
- Word Documentation: `Bank_Marketing_Insights_Documentation.docx`
- Final Data: `cleaned_bank_data.csv`
Additional Notes
- Data access was handled using mysql-connector
- Stored procedure results accessed via `cursor.stored_results()` for compatibility.
- Plot styling used default matplotlib themes with clear legends.


Python Script Documentation

clean_data.py – Data Cleaning & Preprocessing
Purpose:
To clean, standardize, and prepare raw bank marketing data from MySQL for analysis.
Key Operations:
- Connects to MySQL (`bank_marketing.bank_data`) using `mysql.connector`
- Reads raw data into a pandas DataFrame using `pd.read_sql()`
- Renames reserved column `default` to `default_status`
- Standardizes categorical columns like `job`, `education`, etc.
- Maps 'yes'/'no' fields (e.g., `y`, `loan`) to binary values (1/0)
- Prints `y` value counts for verification
- Saves cleaned data to `data/cleaned_bank_data.csv`
Output:
Cleaned, consistent CSV file ready for loading into MySQL.
load_cleaned_csv_to_mysql.py – Load Cleaned Data into MySQL
Purpose:
To load cleaned data from CSV into the MySQL database.
Key Operations:
- Reads `cleaned_bank_data.csv` into a DataFrame
- Connects to MySQL using `SQLAlchemy`
- Loads data into `bank_marketing.bank_data` using `df.to_sql()`
- Replaces existing table content to maintain freshness
Output:
Updated `bank_data` table in MySQL with clean data.
analyze_bank_data.py – Procedure Execution & Visualization
Purpose:
To extract aggregated insights using stored procedures and visualize them.
Key Operations:
- Connects to MySQL using `mysql.connector`
- Calls 3 stored procedures:
   • GetSubscriptionByEducation
   • GetAvgBalanceByJob
   • GetSubscriptionByAgeGroup
- Converts stored results into DataFrames
- Generates 3 subplot visualizations using `matplotlib`
   • Subscriptions by Education
   • Average Balance by Job
   • Subscription Rate by Age Group
Output:
Interactive charts for data-driven decision-making.

